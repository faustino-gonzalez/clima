{"version":3,"sources":["components/Header.js","components/Formulario.js","components/Error.js","components/Clima.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","titulo","Formulario","ciudadRef","React","createRef","paisRef","enviarClima","e","preventDefault","respuesta","ciudad","current","value","pais","datosConsulta","onSubmit","this","id","ref","type","htmlFor","defaultValue","Component","Error","mensaje","Clima","mostrarResultado","resultado","name","weather","main","alt","urlIcono","icon","temp","toFixed","src","temp_mx","temp_min","href","console","log","App","state","error","consulta","consultaApi","url","fetch","then","json","datos","setState","catch","prevProps","prevState","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.f4741980.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nconst Header = (props) => {\r\n    return (\r\n        <div>\r\n            <nav>\r\n<div className=\"nav-wrapper black drken-2\">\r\n    \r\n    <a className=\"brand-logo\"> {props.titulo} </a>\r\n\r\n\r\n</div>\r\n            </nav>\r\n        </div>\r\n    );\r\n};\r\nHeader.propTypes ={\r\ntitulo: PropTypes.string.isRequired\r\n\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nclass Formulario extends Component {\r\n\r\n//crear refs\r\n\r\nciudadRef= React.createRef();\r\npaisRef= React.createRef();\r\n\r\n\r\n    enviarClima = (e) =>{\r\ne.preventDefault();\r\n\r\n//leer refs\r\nconst respuesta = {\r\n\r\nciudad: this.ciudadRef.current.value,\r\npais: this.paisRef.current.value\r\n\r\n}\r\n\r\n\r\n//console.log(respuesta);\r\n//enviar props\r\n\r\nthis.props.datosConsulta(respuesta);\r\n////opcional reset form\r\n\r\n    }\r\n    render() { \r\n        return (\r\n\r\n<div className=\"contenedor-form\"\r\n>\r\n\r\n    <div className=\"container\">\r\n        <div className=\"row\">\r\n            <form onSubmit={this.enviarClima}>\r\n<div className=\"input-field col s12 m8 l4 offset-m2\" >\r\n    <input id=\"ciudad\" ref={this.ciudadRef} type=\"text\" />\r\n    <label htmlFor=\"ciudad\">Ciudad: </label>\r\n\r\n</div>\r\n<div className=\"input-field col s12 m8 l4 offset-m2\" >\r\n    <select ref={this.paisRef}>\r\n        <option value=\"\" defaultValue>Elige un Pais</option>\r\n        <option value=\"AR\">ARGENTINA</option> \r\n        <option value=\"CO\"> COLOMBIA</option> \r\n        <option value=\"CR\"> COSTA RICA</option> \r\n        <option value=\"ES\"> ESPAÃ‘A</option> \r\n        <option value=\"US\"> ESTADOS UNIDOS</option> \r\n        <option value=\"MX\"> MEXICO</option> \r\n        <option value=\"PE\"> PERU</option> \r\n        \r\n\r\n\r\n\r\n    </select>\r\n    <label htmlFor=\"pais\">Pais: </label>\r\n\r\n</div>\r\n<div className=\"input-field col s12 m8 l4 offset-m2 buscador\">\r\n\r\n<input type=\"submit\" className=\"waves-effect waves-light btn-large yellow accent-4\" value=\"Buscar\" />\r\n\r\n</div>\r\n            </form>\r\n\r\n\r\n        </div>\r\n\r\n    </div>\r\n</div>\r\n\r\n          );\r\n    }\r\n}\r\n \r\n\r\nFormulario.propTypes ={\r\n\r\n    datosConsulta: PropTypes.func.isRequired\r\n}\r\nexport default Formulario;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nconst Error = (props) => {\r\n    return ( <div className=\"container\">\r\n\r\n        <div className=\"row\">\r\n            <div className=\"col s12 m5 offset-m3\">\r\n                <div className=\"card-panel red darken-4 error\">\r\n                    {props.mensaje}\r\n\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    </div> );\r\n}\r\n\r\nError.propTypes ={\r\n\r\n    mensaje: PropTypes.string.isRequired\r\n}\r\n\r\n \r\nexport default Error;","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Clima extends Component {\r\n    \r\n\r\n    mostrarResultado=()=>{\r\n\r\nconst {name, weather, main}= this.props.resultado;\r\n\r\nif (!name  || !weather || !main) {\r\n    return null;\r\n\r\n}\r\nconst kelvin = 273.15;\r\nconst alt = `clima de: ${name}`;\r\nconst urlIcono = `http://openweathermap.org/img/w/${weather[0].icon}.png`;\r\nreturn (<div className=\"row\">\r\n<div className=\"col s12 m6\">\r\n  <div className=\"card blue-grey darken-1\">\r\n    <div className=\"card-content white-text\">\r\n<span className=\"card-title\">{name}</span>\r\n      <p>Temeratura actal: {(main.temp - kelvin).toFixed(2)  } &deg;C \r\n      <img src={urlIcono}  alt={alt}/>\r\n      </p>\r\n\r\n      <p>Max.  {main.temp_mx - kelvin  } &deg;C </p>\r\n      <p>Min.  {main.temp_min - kelvin  } &deg;C </p>\r\n\r\n    </div>\r\n    <div className=\"card-action\">\r\n      <a href=\"#\">This is a link</a>\r\n      <a href=\"#\">This is a link</a>\r\n    </div>\r\n  </div>\r\n</div>\r\n</div>)\r\n\r\n    }\r\n    \r\n    render() { \r\n\r\n        console.log(this.props.resultado);\r\n        return ( \r\n\r\n            <div className=\"container\">\r\n\r\n{this.mostrarResultado()}            </div>\r\n         );\r\n    }\r\n}\r\n \r\n\r\nClima.propTypes ={\r\n\r\nresultado: PropTypes.object.isRequired\r\n\r\n}\r\n\r\nexport default Clima;","import React, { Component } from 'react';\nimport Header from './components/Header';\nimport Formulario from './components/Formulario';\nimport Error from './components/Error';\nimport Clima from './components/Clima';\nclass App extends Component{\n\nstate={\n\n  error: '',\n  consulta: {},\n  resultado:{}\n}\ncomponentDidUpdate(prevProps,prevState){\n  if (prevState.consulta != this.state.consulta) {\n\n    this.consultaApi();\n\n  }\n\n}\ncomponentDidMount(){\n\n  this.setState({\n\nerror:false\n\n  })\n}\n\nconsultaApi = () => {\n\nconst {ciudad,pais} = this.state.consulta;\nif (!ciudad || !pais) return null;\nconst appId='75695981a0201e5ca247cbe8b4476981';\nlet url=`http://api.openweathermap.org/data/2.5/weather?q=${ciudad},${pais}&appid=${appId}`;\n\nfetch(url).then(respuesta=>{\n\nreturn respuesta.json();\n})\n.then(datos=>{\n\nthis.setState({\n\nresultado: datos\n\n})\n})\n.catch(error=>{\n  console.log('error');\n  \n  })\n}\n\n\n\n  datosConsulta = (respuesta)=>{\n\nif (respuesta.ciudad === '' || respuesta.pais === '' ) {\n  this.setState({\n\nerror: true\n  });\n  \n}else \n{\nthis.setState({\nconsulta: respuesta,\nerror: false\n\n});\n\n\n}\n  }\n  render()\n  {\n    const error = this.state.error;\n    let resultado;\n    if (error) {\n      resultado =  <Error mensaje = \"Ambos campos son obligatorios\" />\n      \n    }else{\n      resultado =  <Clima resultado = {this.state.resultado} />\n\n\n    }\n\nreturn (\n  <div className=\"app\">\n     <Header\n     titulo ='Clima React' \n     />\n     <Formulario\n      datosConsulta ={this.datosConsulta}\n     />\n     {resultado}\n    </div>\n)\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}